"""Generate a cropland hex map of Arkansas

- Outputs a line-delimited GeoJSON file to the the `caesar/data` directory.
- Each line of the file is an object with a hexagonal geometry and crop information.
- The geometry of each object is a hexagon
    - The hexagons fully cover the convex hull of the Arkansas.
    - The hexagons are generated by the H3 library.
    - Each hexagon is approximately 4 miles from flat to opposite flat
- The properties of each object include crops
    - The choice of crop is the plurality of overlapping crop pixels from the 2022 USDA Cropland Data Layer
    - The color is according to the official USDA CDL color scheme
- The properties of each object include elevation change
    - Elevation is pulled from a public USGS elevation map.
    - Elevation is in meters
    - We specifically use change in elevation, because we're looking for a simple indicator of hills/mountains
"""
import json
import tempfile
import zipfile
from os.path import exists
from urllib.request import urlretrieve

import geopandas as gp
import h3
import numpy as np
import pyproj
import rasterio
import rasterio.mask
from shapely.geometry import Polygon
from shapely.ops import transform
from tqdm import tqdm

res = 6  # =5->"10.5mi" hex, =6->"4mi" hex, =7->"1.5mi" hex , =10->"144yd" hex
cdl = "https://www.nass.usda.gov/Research_and_Science/Cropland/Release/datasets/2022_30m_cdls.zip"
states = "https://www2.census.gov/geo/tiger/TIGER2022/STATE/tl_2022_us_state.zip"
elevation = "https://prd-tnm.s3.amazonaws.com/StagedProducts/Elevation/1/TIFF/USGS_Seamless_DEM_1.vrt"

with open("cdl_legend.json") as FILE:
    legend = json.load(FILE)


def most_common_landcover(ds: rasterio.DatasetReader, shp: Polygon) -> int:
    top = sorted(
        np.array(
            np.unique(
                rasterio.mask.mask(
                    ds,
                    [shp],
                    crop=True,
                )[0],
                return_counts=True,
            )
        ).T,
        key=lambda x: x[1],
        reverse=True,
    )[:2]
    return top[0][0] if top[0][0] != 0 else top[1][0]


def elev_range(ds: rasterio.DatasetReader, shp: Polygon) -> float:
    elevs = rasterio.mask.mask(ds, [shp], crop=True, nodata=np.nan)[0]
    return np.nanmax(elevs) - np.nanmin(elevs), np.nanmax(elevs)


def get_data(tmpdir: str):
    tqdm.pandas()
    # Download the data
    cdl_file = "/".join([tmpdir, cdl.split("/")[-1]])
    states_file = "/".join([tmpdir, states.split("/")[-1]])
    print("Get CDLs...", flush=True)
    if not exists(cdl_file):
        urlretrieve(cdl, cdl_file)
    print("Get state shapes...", flush=True)
    if not exists(states_file):
        urlretrieve(states, states_file)
    # Read the data
    print("Read the data...", flush=True)
    with zipfile.ZipFile(cdl_file) as ark:
        cdl_fname = [f.filename for f in zipfile.ZipFile(cdl_file).filelist if f.filename.endswith("cdls.tif")][0]
    states_df = gp.read_file(states_file)
    # Preprocess the shapes
    print("Make hexes...", flush=True)
    ar_geoj = states_df[states_df["STUSPS"] == "AR"].geometry.convex_hull.__geo_interface__["features"][0]["geometry"]
    hexen = h3.polyfill(ar_geoj, res=res, geo_json_conformant=True)
    hexen_shp = [Polygon(h3.h3_to_geo_boundary(h, True)) for h in hexen]
    gdf = gp.GeoDataFrame(data=dict(geometry=hexen_shp), geometry="geometry", crs="epsg:4326")
    # Combine with CDL raster
    print("Get crops...", flush=True)
    with rasterio.open(f"/vsizip//{cdl_file}/{cdl_fname}") as ds:
        transformer = pyproj.Transformer.from_crs("epsg:4326", ds.crs, always_xy=True).transform
        gdf["projected"] = gdf.geometry.progress_apply(lambda h: transform(transformer, h))
        gdf["crop_id"] = gdf["projected"].progress_apply(lambda x: most_common_landcover(ds, x))
    gdf["crop_name"] = gdf.crop_id.progress_apply(lambda x: legend[str(x)]["name"])
    gdf["crop_color"] = gdf.crop_id.progress_apply(lambda x: legend[str(x)]["color"])
    # Combine with Elevation raster
    print("Get elevation...", flush=True)
    with rasterio.open(f"/vsicurl/{elevation}") as ds:
        transformer = pyproj.Transformer.from_crs("epsg:4326", ds.crs, always_xy=True).transform
        gdf["projected"] = gdf.geometry.progress_apply(lambda h: transform(transformer, h))
        gdf[["elev_range", "elev_max"]] = gdf.progress_apply(
            lambda x: elev_range(ds, x.projected), axis=1, result_type="expand"
        )
    # Write it out
    print(gdf)
    print("Writing...", flush=True)
    gdf[["geometry", "crop_name", "crop_color", "elev_range", "elev_max"]].to_file(
        "../caesar/data/ar_crops.jsonl",
        "GeoJSONSeq",
    )
    print("Done!", flush=True)


if __name__ == "__main__":
    with tempfile.TemporaryDirectory() as tmpdir:
        get_data(tmpdir)
