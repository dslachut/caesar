"""Generate a cropland hex map of Arkansas

- Outputs a line-delimited GeoJSON file to the the `caesar/data` directory.
- Each line of the file is an object with a hexagonal geometry and crop information.
- The geometry of each object is a hexagon
    - The hexagons fully cover the convex hull of the Arkansas.
    - The hexagons are generated by the H3 library.
    - Each hexagon is approximately 4 miles from flat to opposite flat
- The properties of each object are crops
    - The choice of crop is the plurality of overlapping crop pixels from the 2022 USDA Cropland Data Layer
    - The color is according to the official USDA CDL color scheme
"""
import json
import tempfile
import zipfile
from os.path import exists
from urllib.request import urlretrieve

import geopandas as gp
import h3
import numpy as np
import pyproj
import rasterio
import rasterio.mask
from shapely.geometry import Polygon
from shapely.ops import transform

res = 6
cdl = "https://www.nass.usda.gov/Research_and_Science/Cropland/Release/datasets/2022_30m_cdls.zip"
states = "https://www2.census.gov/geo/tiger/TIGER2022/STATE/tl_2022_us_state.zip"

with open("cdl_legend.json") as FILE:
    legend = json.load(FILE)


def most_common_landcover(ds: rasterio.DatasetReader, shp: Polygon):
    top = sorted(
        np.array(
            np.unique(
                rasterio.mask.mask(
                    ds,
                    [shp],
                    crop=True,
                )[0],
                return_counts=True,
            )
        ).T,
        key=lambda x: x[1],
        reverse=True,
    )[:2]
    return top[0][0] if top[0][0] != 0 else top[1][0]


def get_data(tmpdir):
    # Download the data
    cdl_file = "/".join([tmpdir, cdl.split("/")[-1]])
    states_file = "/".join([tmpdir, states.split("/")[-1]])
    if not exists(cdl_file):
        urlretrieve(cdl, cdl_file)
    if not exists(states_file):
        urlretrieve(states, states_file)
    # Read the data
    with zipfile.ZipFile(cdl_file) as ark:
        cdl_fname = [f.filename for f in zipfile.ZipFile(cdl_file).filelist if f.filename.endswith("cdls.tif")][0]
    states_df = gp.read_file(states_file)
    # Preprocess the shapes
    ar_geoj = states_df[states_df["STUSPS"] == "AR"].geometry.convex_hull.__geo_interface__["features"][0]["geometry"]
    hexen = h3.polyfill(ar_geoj, res=res, geo_json_conformant=True)
    hexen_shp = [Polygon(h3.h3_to_geo_boundary(h, True)) for h in hexen]
    gdf = gp.GeoDataFrame(data=dict(geometry=hexen_shp), geometry="geometry", crs="epsg:4326")
    # Combine with raster
    with rasterio.open(f"/vsizip//{cdl_file}/{cdl_fname}") as ds:
        transformer = pyproj.Transformer.from_crs("epsg:4326", ds.crs, always_xy=True).transform
        gdf["projected"] = gdf.geometry.apply(lambda h: transform(transformer, h))
        gdf["crop_id"] = gdf["projected"].apply(lambda x: most_common_landcover(ds, x))
    gdf["crop_name"] = gdf.crop_id.apply(lambda x: legend[str(x)]["name"])
    gdf["crop_color"] = gdf.crop_id.apply(lambda x: legend[str(x)]["color"])
    gdf[["geometry", "crop_name", "crop_color"]].to_file("../caesar/data/ar_crops.jsonl", "GeoJSONSeq")


if __name__ == "__main__":
    with tempfile.TemporaryDirectory() as tmpdir:
        get_data(tmpdir)
